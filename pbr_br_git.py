#!/usr/bin/python3.9
#!/usr/bin/env python
# coding: utf-8

import datetime
import logging
import pathlib
import subprocess
import urllib
import urllib.parse
import warnings
from io import StringIO
from sys import platform
from time import sleep

import pandas as pd
import requests
import yaml
from requests.adapters import HTTPAdapter
from requests.packages.urllib3.util.retry import Retry
from sqlalchemy import create_engine

start_time = datetime.datetime.now()
print("--- Start PBR! üöÄ ---", str(datetime.datetime.now())[0:19])
print("ID:", int(datetime.datetime.now().timestamp()))
warnings.filterwarnings("ignore")
subprocess.run(
    "zabbix_sender -c /etc/zabbix/zabbix_agentd.conf -s Application_monitoring"
    " -k pbr_br_start -o 'Ok'",
    shell=True,
)

# –û–±—â–∏–π —Ä–∞–∑–¥–µ–ª
SESSION = requests.Session()

id_message = str(int(datetime.datetime.now().timestamp()))


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ª–æ–≥–µ—Ä–∞
if platform == "linux" or platform == "linux2":
    logging.basicConfig(
        filename="/var/log/log-execute/log_journal_pbr.log.txt",
        level=logging.INFO,
        format=(
            "%(asctime)s - %(levelname)s - "
            "%(funcName)s: %(lineno)d - %(message)s"
        ),
    )
elif platform == "win32":
    logging.basicConfig(
        filename=f"{pathlib.Path(__file__).parent.absolute()}/log_journal_pbr.log.txt",
        level=logging.INFO,
        format=(
            "%(asctime)s - %(levelname)s - "
            "%(funcName)s: %(lineno)d - %(message)s"
        ),
    )

# –ó–∞–≥—Ä—É–∂–∞–µ–º yaml —Ñ–∞–π–ª —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
with open(
    str(pathlib.Path(__file__).parent.absolute()) + "/settings.yaml", "r"
) as yaml_file:
    settings = yaml.safe_load(yaml_file)
telegram_settings = pd.DataFrame(settings["telegram"])
sql_settings = pd.DataFrame(settings["sql_db"])
br_settings = pd.DataFrame(settings["br"])
gtp_settings = pd.DataFrame(settings["gtp"])


# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ telegram –Ω–∞ –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤
# (—É–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ yaml —Ñ–∞–π–ª–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫)
def telegram(i, text):
    # –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ telegram –Ω–∞ –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤
    # (—É–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ yaml —Ñ–∞–π–ª–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫)
    try:
        msg = urllib.parse.quote(str(text))
        bot_token = str(telegram_settings.bot_token[i])
        channel_id = str(telegram_settings.channel_id[i])

        retry_strategy = Retry(
            total=3,
            status_forcelist=[101, 429, 500, 502, 503, 504],
            method_whitelist=["GET", "POST"],
            backoff_factor=1,
        )
        adapter = HTTPAdapter(max_retries=retry_strategy)
        http = requests.Session()
        http.mount("https://", adapter)
        http.mount("http://", adapter)

        http.post(
            f"https://api.telegram.org/bot{bot_token}/sendMessage?chat_id={channel_id}&text={msg}",
            verify=False,
            timeout=10,
        )
    except Exception as err:
        print(f"pbr_br: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ telegram - {err}")
        logging.error(f"pbr_br: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ telegram - {err}")


def connection(i):
    # –§—É–Ω–∫—Ü–∏—è –∫–æ–Ω–Ω–µ–∫—Ç–∞ –∫ –±–∞–∑–µ Mysql
    # (–¥–ª—è –≤—ã–±–æ—Ä–∞ –±–∞–∑—ã –∑–∞–¥–∞—Ç—å –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä —á–∏—Å–ª–æ–º ! –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0 !)
    host_yaml = str(sql_settings.host[i])
    user_yaml = str(sql_settings.user[i])
    port_yaml = int(sql_settings.port[i])
    password_yaml = str(sql_settings.password[i])
    database_yaml = str(sql_settings.database[i])
    db_data = f"mysql://{user_yaml}:{password_yaml}@{host_yaml}:{port_yaml}/{database_yaml}"
    return create_engine(db_data).connect()


# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞ –≤ –±–∞–∑—É
def load_data_to_db(db_name, connect_id, dataframe):
    telegram(1, "pbr_br: –°—Ç–∞—Ä—Ç –∑–∞–ø–∏—Å–∏ –≤ –ë–î.")
    logging.info("pbr_br: –°—Ç–∞—Ä—Ç –∑–∞–ø–∏—Å–∏ –≤ –ë–î.")

    dataframe = pd.DataFrame(dataframe)
    connection_skm = connection(connect_id)
    try:
        dataframe.to_sql(
            name=db_name,
            con=connection_skm,
            if_exists="append",
            index=False,
            chunksize=5000,
        )
        rows = len(dataframe)
        telegram(
            1,
            f"pbr_br: –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –ë–î {rows} —Å—Ç—Ä–æ–∫",
        )
        logging.info(f"pbr_br: –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –ë–î {rows} —Å—Ç—Ä–æ–∫")
        telegram(1, "pbr_br: –§–∏–Ω–∏—à –∑–∞–ø–∏—Å–∏ –≤ –ë–î.")
        logging.info("pbr_br: –§–∏–Ω–∏—à –∑–∞–ø–∏—Å–∏ –≤ –ë–î.")
    except Exception as err:
        telegram(1, f"pbr_br: –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ë–î: {err}")
        logging.info(f"pbr_br: –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ë–î: {err}")


def br_login(data):
    url = "https://br.so-ups.ru/webapi/Auth/AuthByUserName"
    while True:
        request = SESSION.post(url, data=data, verify=False)
        if request.status_code == 200:
            return request
        print(request.status_code)
        telegram(
            1,
            "pbr_br: –ù–µ—É—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ —Å–∞–π—Ç–µ br.so-ups.ru. –°—Ç–∞—Ç—É—Å:"
            f" {request.status_code}\n ID: {id_message}",
        )
        logging.info(
            "pbr_br: –ù–µ—É—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ —Å–∞–π—Ç–µ br.so-ups.ru. –°—Ç–∞—Ç—É—Å:"
            f" {request.status_code}\n ID: {id_message}"
        )
        sleep(5)


try:
    telegram(1, f"–°—Ç–∞—Ä—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –ü–ë–† –≤ –±–∞–∑—É pbr_br \n ID: {id_message}")
except Exception as exc:
    print(exc)
# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–ø–∏—Å–∫—É –ì–¢–ü
date_download = str(
    (datetime.datetime.today() + datetime.timedelta(hours=1)).strftime(
        "%d.%m.%Y"
    )
)

br_login(br_settings.br_auth[0])

CsvTable = SESSION.get(
    "https://br.so-ups.ru/webapi/api/Export/Csv/Gtp.aspx?date="
    + date_download
    + "&gtpIds="
    + gtp_settings.gtp_dict[0],
    verify=False,
)
CsvTable.encoding = "windows-1251"

DataFrame = pd.DataFrame()
DataFrame = pd.read_table(StringIO(CsvTable.text), delimiter=";").fillna(0)
DataFrame.insert(
    2,
    "dt",
    pd.to_datetime(DataFrame["SESSION_DATE"], dayfirst=True, utc=False)
    + pd.to_timedelta(DataFrame["SESSION_INTERVAL"], unit="h"),
)
# print(DataFrame)

col_to_float = [
    "TG",
    "PminPDG",
    "PmaxPDG",
    "PVsvgo",
    "PminVsvgo",
    "PmaxVsvgo",
    "PminBR",
    "PmaxBR",
    "IBR",
    "CbUP",
    "CbDown",
    "CRSV",
    "TotalBR",
    "EVR",
    "OCPU",
    "OCPS",
    "Pmin",
    "Pmax",
]
for col in col_to_float:
    DataFrame[col] = (
        DataFrame[col].replace(",", ".", regex=True).astype("float")
    )

col_to_int = ["SESSION_NUMBER", "SESSION_INTERVAL"]
for col in col_to_int:
    DataFrame[col] = DataFrame[col].replace(",", ".", regex=True).astype("int")

print(DataFrame)

load_data_to_db(
    "pbr_br",
    0,
    DataFrame,
)

print("–î–∞–Ω–Ω—ã–µ –ü–ë–† –≤ –±–∞–∑—É pbr_br –∑–∞–≥—Ä—É–∂–µ–Ω—ã. üèÅ")
print("–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:", str(datetime.datetime.now() - start_time)[0:10])
try:
    telegram(
        1,
        "–î–∞–Ω–Ω—ã–µ –ü–ë–† –≤ –±–∞–∑—É pbr_br –∑–∞–≥—Ä—É–∂–µ–Ω—ã."
        f" (‚àÜ={str(datetime.datetime.now() - start_time)[0:9]}\n"
        f" ID:{id_message}",
    )
except Exception as exc:
    print(exc)

# –∫–æ–Ω—Ç—Ä–æ–ª—å –≤ zabbix –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã
subprocess.run(
    "zabbix_sender -c /etc/zabbix/zabbix_agentd.conf -s Application_monitoring"
    " -k pbr_br_download_to_base -o 'Ok'",
    shell=True,
)

